// Generated by CoffeeScript 1.8.0
(function() {
  var AudioContext, analyser, context, e, getFreq, hue, input, ip, range, user;

  AudioContext = window.AudioContext || window.webkitAudioContext;

  try {
    context = new AudioContext();
  } catch (_error) {
    e = _error;
    console.error('Web Audio API is not suppported in this browser');
  }

  navigator.getUserMedia = navigator.webkitGetUserMedia;

  analyser = null;

  input = null;

  hue = null;

  ip = '192.168.1.100';

  user = 'newdeveloper';

  getFreq = null;

  range = 50;

  analyser = context.createAnalyser();

  analyser.fftsize = 1024;

  analyser.smoothingTimeContant = 0;

  hue = new HueController(ip, user);

  hue.changeBri(3, 255).then(function(result) {
    return console.log('onloaded');
  }).fail(function(err) {
    return console.log(err);
  });

  $('.start').click(function() {
    if (!navigator.getUserMedia) {
      return alert('WebRTC(getUserMedia) is not suppported...');
    } else {
      console.log('getUserMedia suppported.');
      return navigator.getUserMedia({
        audio: true
      }, function(stream) {
        input = context.createMediaStreamSource(stream);
        return input.connect(analyser);
      }, function(err) {
        return console.log('Error: ' + err);
      });
    }
  });

  $('#slider').slider({
    min: 0,
    max: 255,
    step: 1,
    value: 50,
    change: function(e, ui) {
      $('#num').text(ui.value);
      return range = ui.value;
    },
    create: function(e, ui) {
      return $('#num').text($(this).slider('option', 'value'));
    }
  });

  getFreq = function() {
    var data, i, sum, _i;
    data = new Uint8Array(256);
    analyser.getByteFrequencyData(data);
    sum = 0;
    for (i = _i = 0; _i <= 255; i = ++_i) {
      sum += data[i];
    }
    return hue.lightTrriger(3, parseInt(sum / 256) > range).then(function(result) {
      console.log(result);
      console.log(parseInt(sum / 255));
      return $('#volume').text((sum / 255).toString());
    }).fail(function(err) {
      return console.log(err);
    });
  };

  setInterval(getFreq, 80);

}).call(this);
