// Generated by CoffeeScript 1.8.0
(function() {
  var analyser, buffer, context, createGainNode, gainNode, getFreq, init, loadSound, makeSource, playSound, source, stopSound, url, volume;

  init = function(callback) {
    var AudioContext, context, e;
    if (callback == null) {
      callback = function() {};
    }
    try {
      AudioContext = window.AudioContext || window.webkitAudioContext;
      context = new AudioContext();
      return callback(null, context);
    } catch (_error) {
      e = _error;
      return callback('Web Audio API is not supported in this browser');
    }
  };

  loadSound = function(context, url, callback) {
    var request;
    if (callback == null) {
      callback = function() {};
    }
    request = new XMLHttpRequest();
    request.open('GET', url, true);
    request.responseType = 'arraybuffer';
    request.send();
    return request.onload = function() {
      return context.decodeAudioData(request.response, function(buffer) {
        return callback(buffer);
      });
    };
  };

  makeSource = function(context, buffer) {
    var source;
    source = context.createBufferSource();
    source.buffer = buffer;
    source.connect(context.destination);
    return source;
  };

  playSound = function(source) {
    return source.start(0);
  };

  stopSound = function(source) {
    return source.stop();
  };

  createGainNode = function(context, source) {
    var gainNode;
    gainNode = context.createGain();
    source.connect(gainNode);
    gainNode.connect(context.destination);
    return gainNode;
  };

  context = null;

  source = null;

  gainNode = null;

  buffer = null;

  url = null;

  volume = null;

  analyser = null;

  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || msGetUserMedia;

  getFreq = function() {
    var data, i, sum, _i;
    data = new Uint8Array(256);
    analyser.getByteFrequencyData(data);
    sum = 0;
    for (i = _i = 0; _i <= 256; i = ++_i) {
      sum += i;
    }
    return $('#env_volume').text(sum.toString());
  };

  window.onload = init(function(err, con) {
    context = con;
    analyser = context.createAnalyser;
    analyser.fftsize = 1024;
    return analyser.smoothingTimeContant = 0.9;
  });

  $(function() {
    $('#audio').click(function() {
      if (!navigator.getUserMedia) {
        return console.log('WebRTC(getUserMedia) is not supported...');
      } else {
        console.log('getUserMedia supported');
        return navigator.getUserMedia({
          audio: true
        }, function(stream) {
          var input;
          input = context.createMediaStreamSource(stream);
          return input.connect(analyser);
        }, function(err) {
          return console.log('Error: ' + err);
        });
      }
    });
    $('#button').click(function() {
      $('#loading').text('Now loading...');
      url = $('#url').val();
      return loadSound(context, url, function(buf) {
        buffer = buf;
        source = makeSource(context, buf);
        gainNode = createGainNode(context, source);
        $('#loading').text('Loading is completed!');
        $('#sound_player').html('<input type="button" id="start" value="Start"> <input type="button" id="stop" value="Stop">');
        return $('#slider').slider({
          min: 0,
          max: 100,
          step: 1,
          value: 50,
          change: function(e, ui) {
            return gainNode.gain.value = ui.value;
          },
          create: function(e, ui) {
            return volume = $(this).slider('option', 'value');
          }
        });
      });
    });
    return setInterval(getFreq, 100);
  });

}).call(this);
